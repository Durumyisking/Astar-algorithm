#include "Astar.h"


using namespace std;

char map[7][5] = {
	{'1', '1', '1', '1', '1'},
	{'0', '0', '0', '0', '0' },
	{'S', '1', '0', '0', '0' },
	{'0', '1', '0', '1', '0' },
	{'0', '0', '0', '1', '0' },
	{'1', '0', '0', 'E', '0' },
	{'1', '1', '1', '1', '1' }
};
// S : 0, 2
// E : 3, 5

int main()
{

	/*
	1. P = 시작점
2. P에 f, g, h 할당
3. Open 리스트에 P 넣기
4. B = Open 리스트에서 가장 낮은 f 값을 가진 노드
    a. B가 목표점이면, 경로 완성
    b. Open 리스트가 비었으면, 목표점까지 경로가 존재하지 않음
5. C = B에 연결된 노드
    a. C에 f, g, h 값 할당
    b. Open/Close 리스트에서 C가 있는지 체크
       1. 있으면, 더 낮은 f 값으로 경로 업데이트
       2. 없으면, C를 Open 리스트에 넣기
    c. 5번으로 돌아가서 B에 연결된 모든 노드를 대상으로 진행
6. 4번으로 돌아감
	*/
	char* pMap = *map;


	CAstar* astar = new CAstar(pMap, 5, 7, 3, 5);


	delete astar;

	return 0;
}